// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// logdet
double logdet(Eigen::MatrixXd M);
RcppExport SEXP _mixglm_logdet(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(logdet(M));
    return rcpp_result_gen;
END_RCPP
}
// log_like_glm_cpp
double log_like_glm_cpp(Eigen::VectorXd y_k, Eigen::MatrixXd X_k, Eigen::VectorXd beta_k, Eigen::MatrixXd W_k, Eigen::VectorXd alpha, Eigen::VectorXd sigma2, std::string family);
RcppExport SEXP _mixglm_log_like_glm_cpp(SEXP y_kSEXP, SEXP X_kSEXP, SEXP beta_kSEXP, SEXP W_kSEXP, SEXP alphaSEXP, SEXP sigma2SEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y_k(y_kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X_k(X_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_k(beta_kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W_k(W_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(log_like_glm_cpp(y_k, X_k, beta_k, W_k, alpha, sigma2, family));
    return rcpp_result_gen;
END_RCPP
}
// complete_log_like_glm_cpp
double complete_log_like_glm_cpp(List y, List X, List W, List beta, Eigen::VectorXd alpha, std::string family, Eigen::VectorXd sigma2, bool sigma_fixed, Eigen::VectorXi sample_size, int K);
RcppExport SEXP _mixglm_complete_log_like_glm_cpp(SEXP ySEXP, SEXP XSEXP, SEXP WSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP familySEXP, SEXP sigma2SEXP, SEXP sigma_fixedSEXP, SEXP sample_sizeSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type W(WSEXP);
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< bool >::type sigma_fixed(sigma_fixedSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(complete_log_like_glm_cpp(y, X, W, beta, alpha, family, sigma2, sigma_fixed, sample_size, K));
    return rcpp_result_gen;
END_RCPP
}
// gr_theta_k_binomial_cpp
List gr_theta_k_binomial_cpp(Eigen::VectorXd y_k, Eigen::MatrixXd X_k, Eigen::MatrixXd W_k, Eigen::VectorXd beta_k, Eigen::VectorXd alpha);
RcppExport SEXP _mixglm_gr_theta_k_binomial_cpp(SEXP y_kSEXP, SEXP X_kSEXP, SEXP W_kSEXP, SEXP beta_kSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y_k(y_kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X_k(X_kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W_k(W_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_k(beta_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(gr_theta_k_binomial_cpp(y_k, X_k, W_k, beta_k, alpha));
    return rcpp_result_gen;
END_RCPP
}
// gr_theta_k_gaussian_cpp
List gr_theta_k_gaussian_cpp(Eigen::VectorXd y_k, Eigen::MatrixXd X_k, Eigen::MatrixXd W_k, Eigen::VectorXd beta_k, Eigen::VectorXd alpha, Eigen::MatrixXd R_k, double sigma_k);
RcppExport SEXP _mixglm_gr_theta_k_gaussian_cpp(SEXP y_kSEXP, SEXP X_kSEXP, SEXP W_kSEXP, SEXP beta_kSEXP, SEXP alphaSEXP, SEXP R_kSEXP, SEXP sigma_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y_k(y_kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X_k(X_kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W_k(W_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_k(beta_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type R_k(R_kSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_k(sigma_kSEXP);
    rcpp_result_gen = Rcpp::wrap(gr_theta_k_gaussian_cpp(y_k, X_k, W_k, beta_k, alpha, R_k, sigma_k));
    return rcpp_result_gen;
END_RCPP
}
// gr_theta_cpp
List gr_theta_cpp(List y, List X, List W, std::string family, List beta, Eigen::VectorXd alpha, Eigen::VectorXd sigma, bool sigma_fixed, Eigen::VectorXi sample_size, int K, int p_x, int p_w, List nu, List Lamb, double kappa);
RcppExport SEXP _mixglm_gr_theta_cpp(SEXP ySEXP, SEXP XSEXP, SEXP WSEXP, SEXP familySEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP sigmaSEXP, SEXP sigma_fixedSEXP, SEXP sample_sizeSEXP, SEXP KSEXP, SEXP p_xSEXP, SEXP p_wSEXP, SEXP nuSEXP, SEXP LambSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type W(WSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< List >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type sigma_fixed(sigma_fixedSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p_x(p_xSEXP);
    Rcpp::traits::input_parameter< int >::type p_w(p_wSEXP);
    Rcpp::traits::input_parameter< List >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< List >::type Lamb(LambSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(gr_theta_cpp(y, X, W, family, beta, alpha, sigma, sigma_fixed, sample_size, K, p_x, p_w, nu, Lamb, kappa));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mixglm_logdet", (DL_FUNC) &_mixglm_logdet, 1},
    {"_mixglm_log_like_glm_cpp", (DL_FUNC) &_mixglm_log_like_glm_cpp, 7},
    {"_mixglm_complete_log_like_glm_cpp", (DL_FUNC) &_mixglm_complete_log_like_glm_cpp, 10},
    {"_mixglm_gr_theta_k_binomial_cpp", (DL_FUNC) &_mixglm_gr_theta_k_binomial_cpp, 5},
    {"_mixglm_gr_theta_k_gaussian_cpp", (DL_FUNC) &_mixglm_gr_theta_k_gaussian_cpp, 7},
    {"_mixglm_gr_theta_cpp", (DL_FUNC) &_mixglm_gr_theta_cpp, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixglm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
